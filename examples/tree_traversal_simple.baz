struct TreeNode {
	left: Tree?;
	right: Tree?;
}

enum Tree {
	Leaf(int);
	Node(TreeNode);

	fn sum(): int {
		match (this) {
			Tree::Leaf(value): { return value; },
			Tree::Node(tree_node): {
				return tree_node.left?.sum() ?? 0 + tree_node.right?.sum() ?? 0;
			}
		}
	}

	fn increment_leaves(): void {
		match (this) {
			Tree::Leaf(value): {
				this = Tree::Leaf(value + 1);
			},
			Tree::Node(tree_node): {
				tree_node.left?.increment_leaves();
				tree_node.right?.increment_leaves();
			}
		}
	}
}

fn main(): void {
	let tree: Tree = Tree::Node(
		TreeNode {
			left: Tree::Leaf(1),
			right: Tree::Node(
				TreeNode {
					left: Tree::Node(
						TreeNode {
							left: null,
							right: Tree::Leaf(2),
						}
					),
					right: Tree::Leaf(3),
				}
			),
		}
	);

	println(tree.sum());

	tree.increment_leaves();
	println(tree.sum());
}
