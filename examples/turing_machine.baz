struct TapeCell {
    val: str;

    // Doubly linked list
    prev: TapeCell?;
    next: TapeCell?;

    fn append(val: str): void {
        match (this.next) {
            null: { this.next = TapeCell { val: val, prev: null, next: null }; },
            next: { next.append(val); }
        }
    }

    // Gets the previous value if it exists, or creates a '#' cell to the left, and returns it
    // This creates the illusion of an infinite tape
    fn get_prev_or_extend_empty(): TapeCell {
        match (this.prev) {
            null: {
                let fallback_empty_tape_cell: TapeCell = TapeCell { val: "#", prev: null, next: this };
                this.prev = fallback_empty_tape_cell;
                return fallback_empty_tape_cell;
            },
            prev: {
                return prev;
            },
        }
    }

    // Gets the next value if it exists, or creates a '#' cell to the right, and returns it
    // This creates the illusion of an infinite tape
    fn get_next_or_extend_empty(): TapeCell {
        match (this.next) {
            null: {
                // If no tape to the right - create a new '#' cell on the fly (give the illusion of infinite tape)
                let fallback_empty_tape_cell: TapeCell = TapeCell { val: "#", prev: this, next: null };
                this.next = fallback_empty_tape_cell;
                return fallback_empty_tape_cell;
            },
            next: {
                return next;
            },
        }
    }

    fn print_tape(): void {
        // Find start
        let start: TapeCell? = this;
        while (start?.prev != null && start?.prev?.val != "#") {
            start = start?.prev;
        }

        // Print tape
        while (start != null && start?.val != "#") {
            print(start?.val);
            start = start?.next;
        }

        println();
    }
}

struct Transition {
    from_val: str;
    to_val: str;
    direction: int;
    next_state: int;

    // Linked list
    next_elem: Transition?;

    // Add transition to linked list
    fn append(transition: Transition): void {
        match (this.next_elem) {
            null: { this.next_elem = transition; },
            next: { next.append(transition); }
        }
    }

    // Find the transition that has a `from_val` that matches the val at the current tape head
    fn find_matching(tape_head_val: str): Transition? {
        if (this.from_val == tape_head_val) {
            return this;
        }

        return this.next_elem?.find_matching(tape_head_val);
    }
}

struct State {
    halting: bool;
    transitions: Transition?;

    // Linked list
    next_elem: State?;

    // Add state to linked list
    fn append(state: State): void {
        match (this.next_elem) {
            null: { this.next_elem = state; },
            next: { next.append(state); },
        }
    }

    // Find the matching transition
    fn step(tape_head_val: str): Transition? {
        return this.transitions?.find_matching(tape_head_val);
    }

    // Get the state at a given index
    fn get_at_idx(idx: int): State? {
        if (idx == 0) {
            return this;
        }

        return this.next_elem?.get_at_idx(idx - 1);
    }
}

struct TuringMachine {
    tape_head: TapeCell;
    states: State;
    current_state: State;

    // Returns true if still running (not in halting state)
    fn step(): bool {
        // Find the matching transition
        let transition: Transition? = this.current_state.step(this.tape_head.val);
        match (transition) {
            null: { panic("Error - no transition found"); },
            t: {
                // Update the current state
                let next_state: State? = this.states.get_at_idx(t.next_state);
                match (next_state) {
                    null: { panic("Error - next state not found"); },
                    s: { this.current_state = s; },
                }

                // Update the value on the tape
                this.tape_head.val = t.to_val;

                // If direction is -1, move to left (previous value on tape)
                if (t.direction < 0) {
                    this.tape_head = this.tape_head.get_prev_or_extend_empty();
                }
                // If direction is 1, move to right (next value on tape)
                if (t.direction > 0) {
                    this.tape_head = this.tape_head.get_next_or_extend_empty();
                }

                // Return true if still running
                return !this.current_state.halting;
            }
        }
    }
}

fn main(): void {
    // Initial tape state `0010111`
    let tape: TapeCell = TapeCell { val: "0", prev: null, next: null };
    tape.append("0");
    tape.append("1");
    tape.append("0");
    tape.append("1");
    tape.append("1");
    tape.append("1");

    // First state transitions:
    // Convert 0 -> 1, move right, stay in same state
    // Convert 1 -> 0, move right, stay in same state
    // Convert # -> #, stay still, move to halting state
    let transitions: Transition = Transition { from_val: "0", to_val: "1", direction: 1, next_state: 0, next_elem: null };
    transitions.append(Transition { from_val: "1", to_val: "0", direction: 1, next_state: 0, next_elem: null });
    transitions.append(Transition { from_val: "#", to_val: "#", direction: 0, next_state: 1, next_elem: null });

    // Create first state with transitions, and second as halting with no transitions
    let states: State = State { halting: false, transitions: transitions, next_elem: null };
    states.append(State { halting: true, transitions: null, next_elem: null });

    let tm: TuringMachine = TuringMachine { tape_head: tape, states: states, current_state: states };

    // Loop until halting state
    let running: bool = true;
    while (running) {
        running = tm.step();
    }

    tape.print_tape();
}
