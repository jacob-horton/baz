struct TreeNode {
	value: int;

	left: TreeNode?;
	right: TreeNode?;

	fn in_order_traversal(): void {
		this.left?.in_order_traversal();
		println(this.value);
		this.right?.in_order_traversal();
	}

	fn insert(num: int): void {
		if (num < this.value) {
			if (this.left == null) {
				this.left = TreeNode { value: num, left: null, right: null };
			} else {
				this.left?.insert(num);
			}
		} else {
			if (this.right == null) {
				this.right = TreeNode { value: num, left: null, right: null };
			} else {
				this.right?.insert(num);
			}
		}
	}

	fn contains(num: int): bool {
		if (num == this.value) {
			return true;
		} else {
			if (num < this.value) {
				return this.left?.contains(num) ?? false;
			} else {
				return this.right?.contains(num) ?? false;
			}
		}
	}
}

fn main(): void {
	let tree: TreeNode = TreeNode {
		value: 5,
		left: null,
		right: null,
	};

	tree.insert(3);
	tree.insert(9);
	tree.insert(6);
	tree.insert(8);

	println("==== IN-ORDER TRAVERSAL ====");
	tree.in_order_traversal();

	println("\n==== NUMBERS IN TREE ====");
	let i: int = 0;
	while (i < 10) {
		print(i);
		print(": ");
		println(tree.contains(i));

		i = i + 1;
	}
}
